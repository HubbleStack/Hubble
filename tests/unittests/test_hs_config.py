#!/usr/bin/env python
# coding: utf-8

import copy
import json
import pytest

def intentionally_changed_value_filter(key_name, value):
    if isinstance(value, list):
        return [ intentionally_changed_value_filter(key_name, v) for v in value ]
    if isinstance(value, dict):
        return { k: intentionally_changed_value_filter(k, v) for k,v in value.items() }
    if isinstance(value, str):
        value = value.replace('/etc/salt/', '/etc/hubble/')
        value = value.replace('/var/cache/salt/', '/var/cache/hubble/')
        value = value.replace('/srv/salt/', '/srv/hubble/')
    return value

@pytest.fixture
def intentionally_removed_opts():
    return {
    "auth_safemode",
    "auth_timeout",
    "auth_tries",
    "cluster_masters",
    "cluster_mode",
    "decrypt_pillar",
    "decrypt_pillar_default",
    "decrypt_pillar_delimiter",
    "decrypt_pillar_renderers",
    "enable_ssh_minions",
    "gather_job_timeout",
    "keysize",
    "master_roots",
    "master_shuffle",
    "master_tries",
    "pillar_roots",
    "random_master",
    "random_reauth_delay",
    "sign_pub_messages",
    "sock_dir",
    "sqlite_queue_dir",
    "ssh_config_file",
    "ssh_identities_only",
    "ssh_log_file",
    "ssh_merge_pillar",
    "ssh_passwd",
    "ssh_scan_ports",
    "ssh_scan_timeout",
    "ssh_sudo",
    "ssh_sudo_user",
    "ssh_timeout",
    "ssh_user",
    "syndic_event_forward_timeout",
    "syndic_jid_forward_cache_hwm",
    "transport",
    'decrypt_pillar',
    'decrypt_pillar_default',
    'decrypt_pillar_delimiter',
    'decrypt_pillar_renderers',
    'syndic_event_forward_timeout',
    'syndic_failover',
    'syndic_finger',
    'syndic_forward_all_events',
    'syndic_jid_forward_cache_hwm',
    'syndic_log_file',
    'syndic_master',
    'syndic_pidfile',
    'syndic_wait',
    'thorium_interval',
    'thorium_roots',
    'thorium_top',
    'thoriumenv',
    }

@pytest.fixture
def salt_config_opts(intentionally_removed_opts):
    """ computed-opts.json are the opts as generated by hubble's 4.1 branch
        at rev 88c4421 using the tests/unittests/conftest.py::__opts__, which
        itself uses tests/unittests/hubble.config

        There are certain things we never want to compare though, like the
        __cli (usually something like 'pytest' if this fixture is loading) and
        the key "grains" (which tells us a lot about the docker container, but
        doesn't compare very well and also isn't very relevant to this test.

        Because of the above, a few things in the orig-config.json are marked "!NO COMPARE!".
        If the key is also found on the __opts__ fixture (loaded from
        hubblestack.config); then we simply replace the new loaded value under
        that key with "!NO COMPARE!" also.  Strictly speaking "!NO COMPARE!"
        items are still compared in the sense that they have to exist in the
        new loaded config.

        We also keep a list of items intentionally removed from
        hubblestack.config that used to be in salt.config (e.g. raet and zmq
        settings). For these items, we have a simple fixture and we remove them
        from the orig_opts without checking to see if they're in the loaded
        opts. (Meaning we properly test to see that they're correctly missing
        in the actual test.)
    """

    with open('tests/unittests/resources/orig-config.json', 'r') as fh:
        dat = json.load(fh)
    for k in intentionally_removed_opts:
        if k in dat:
            del dat[k]
    return dat

@pytest.fixture
def modified_hs_config_opts(__opts__, salt_config_opts):
    opts = copy.deepcopy(__opts__) ## __opts__ is already a deepcopy, but for clarity, we'll leave this
    for k,v in salt_config_opts.items():
        if v == '!NO COMPARE!' and k in opts:
            opts[k] = v
    return opts

def test_new_hs_config_same_as_old_salt_config(modified_hs_config_opts,
        salt_config_opts, intentionally_removed_opts):

    all_keys = set(modified_hs_config_opts).union(set(salt_config_opts))
    for key in all_keys:
        assert key not in intentionally_removed_opts
        assert key in modified_hs_config_opts
        assert key in salt_config_opts

        # construct mini dictionaries so if the comparison fails, one can
        # actually figure out where the failure occured.
        modified = { key: modified_hs_config_opts[key] }
        saltorig = { key: intentionally_changed_value_filter(key, salt_config_opts[key]) }
        assert modified == saltorig
