#################################
## GitFS Config
#################################
##
## Hubble doesn't ship with profiles. To get the default profiles, you can
## subscribe via GitFS to the hubblestack_data repo. You must also have either
## python-gitpython or python-pygit2 installed. (python-pygit2 is recommended
## if available

file_roots:
   base:
     - /home/ec2-user/hubble_profiles_base/hubbledmeprodloca_hubblestackdata_base

fileserver_backend:
  - roots

fileserver_update_frequency: 3600
delete_inaccessible_azure_containers: True

#################################
## Scheduler Config
#################################
##
## Hubble has a basic scheduler which can be used to schedule jobs at various
## intervals (defined by the `seconds` argument), with optional splay.
##
## Below is a sample schedule for all of the modules included in hubble

schedule:
  audit_daily:
    function: hubble.top
    seconds: 86400
    splay: 9000
    min_splay: 7200
    kwargs:
      verbose: True
      show_profile: True
    returner: splunk_nova_return
    run_on_start: True
  nebula_fifteen_min:
    function: nebula.top
    seconds: 900
    splay: 300
    args:
      - fifteen_min
    kwargs:
      mask_passwords: True
    returner: splunk_nebula_return
    run_on_start: True
  nebula_hour:
    function: nebula.top
    seconds: 3600
    splay: 900
    args:
      - hour
    kwargs:
      mask_passwords: True
    returner: splunk_nebula_return
    run_on_start: True
  nebula_day:
    function: nebula.top
    seconds: 86400
    splay: 3600
    args:
      - day
    kwargs:
      mask_passwords: True
    returner: splunk_nebula_return
    run_on_start: True
  nebula_osqueryd_monitor:
    function: nebula.osqueryd_monitor
    seconds: 60
    splay: 10
    kwargs:
      configfile: /home/ec2-user/hubble_profiles_base/hubbledmeprodloca_hubblestackdata_base/osquery/osquery.conf
      flagfile: /home/ec2-user/hubble_profiles_base/hubbledmeprodloca_hubblestackdata_base/osquery/osquery.flags
      logdir: /var/log/hubble_osquery
      databasepath: /var/cache/hubble/osquery
      pidfile: /var/run/hubble_osquery/osquery.pidfile
      hashfile: /var/cache/hubble/osquery/hash_of_flagfile.txt
    run_on_start: True
  nebula_osquery:
    function: nebula.osqueryd_log_parser
    seconds: 60
    splay: 10
    kwargs:
      osqueryd_logdir: /var/log/hubble_osquery
      backuplogdir: /var/log/hubble_osquery/backuplogs
      maxlogfilesizethreshold: 100000
      logfilethresholdinbytes: 10000
      enablediskstatslogging: True
      backuplogfilescount: 5
      mask_passwords: True
    returner: splunk_osqueryd_return
    run_on_start: True
  pulsar:
    function: pulsar.top
    seconds: 1
    returner: splunk_pulsar_return
    run_on_start: True
  pulsar_canary:
    function: pulsar.canary
    seconds: 86400
    run_on_start: True
  conf_publisher:
    function: conf_publisher.publish
    seconds: 86400
    splay: 3600
    run_on_start: True
  ndtrack_creds_cache:
    function: cp.get_file
    seconds: 86400
    args:
      - salt://hubblestack_ndtrack_creds.dat
      - /opt/ndtrack/uploadercreds.dat
    run_on_start: True
  ndtrack_creds_permissions:
    function: cmd.run
    seconds: 3600
    args:
      - 'chmod 600 /opt/ndtrack/uploadercreds.dat'
    run_on_start: True
  ndtrack:
    function: cmd.run
    seconds: 604800
    splay: 3600
    args:
      - "/opt/ndtrack/ndtrack.sh -t Machine -o Upload=True -o Compress=False -o UploadLocation=https://dslite.adobe.com/ManageSoftRL/ -o UploadCredFile=/opt/ndtrack/uploadercreds.dat -o UploadCredFileKey=Raynet@DSLite2018 -o NetworkSense=False -o CheckCertificateRevocation=False -o CheckServerCertificate=True -o SSLCACertificateFile='/opt/ndtrack/Root_CA_certificate.pem'"
    run_on_start: True

#################################
## Returner Config
#################################
##
## In order for the sample scheduler config to work, you must configure the
## returners which are being used. In the case of the Splunk returners, you
## must add index, token, and endpoint information

hubblestack:
  returner:
    splunk:
      - token: XXXXXXXXXXXXXXXXXXXXXXXXXXX
        indexer: myindex.net
        index: hubble
        timeout: 60
        sourcetype_nova: hubble_audit
        sourcetype_nebula: hubble_osquery
        sourcetype_osqueryd: hubble_osqd
        sourcetype_pulsar: hubble_fim
        sourcetype_log: hubble_log
splunklogging: True

## If you are instead using the slack returner, you'll need a block similar to
## this:

#slack_pulsar:
#  as_user: true
#  username: calculon
#  channel: channel
#  api_key: xoxb-xxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxx
